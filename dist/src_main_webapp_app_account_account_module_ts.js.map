{"version":3,"file":"src_main_webapp_app_account_account_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/account/account.module.ts","./src/main/webapp/app/account/account.route.ts","./src/main/webapp/app/account/activate/activate.component.ts","./src/main/webapp/app/account/activate/activate.component.html","./src/main/webapp/app/account/activate/activate.route.ts","./src/main/webapp/app/account/activate/activate.service.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.component.html","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.route.ts","./src/main/webapp/app/account/password-reset/finish/password-reset-finish.service.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.component.html","./src/main/webapp/app/account/password-reset/init/password-reset-init.route.ts","./src/main/webapp/app/account/password-reset/init/password-reset-init.service.ts","./src/main/webapp/app/account/password/password-strength-bar/password-strength-bar.component.ts","./src/main/webapp/app/account/password/password-strength-bar/password-strength-bar.component.html","./src/main/webapp/app/account/password/password.component.ts","./src/main/webapp/app/account/password/password.component.html","./src/main/webapp/app/account/password/password.route.ts","./src/main/webapp/app/account/password/password.service.ts","./src/main/webapp/app/account/register/register.component.ts","./src/main/webapp/app/account/register/register.component.html","./src/main/webapp/app/account/register/register.route.ts","./src/main/webapp/app/account/register/register.service.ts","./src/main/webapp/app/account/settings/settings.component.ts","./src/main/webapp/app/account/settings/settings.component.html","./src/main/webapp/app/account/settings/settings.route.ts","./src/main/webapp/app/config/error.constants.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from 'app/shared/shared.module';\nimport { PasswordStrengthBarComponent } from './password/password-strength-bar/password-strength-bar.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ActivateComponent } from './activate/activate.component';\nimport { PasswordComponent } from './password/password.component';\nimport { PasswordResetInitComponent } from './password-reset/init/password-reset-init.component';\nimport { PasswordResetFinishComponent } from './password-reset/finish/password-reset-finish.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { accountState } from './account.route';\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(accountState)],\n  declarations: [\n    ActivateComponent,\n    RegisterComponent,\n    PasswordComponent,\n    PasswordStrengthBarComponent,\n    PasswordResetInitComponent,\n    PasswordResetFinishComponent,\n    SettingsComponent,\n  ],\n})\nexport class AccountModule {}\n","import { Routes } from '@angular/router';\n\nimport { activateRoute } from './activate/activate.route';\nimport { passwordRoute } from './password/password.route';\nimport { passwordResetFinishRoute } from './password-reset/finish/password-reset-finish.route';\nimport { passwordResetInitRoute } from './password-reset/init/password-reset-init.route';\nimport { registerRoute } from './register/register.route';\nimport { settingsRoute } from './settings/settings.route';\n\nconst ACCOUNT_ROUTES = [activateRoute, passwordRoute, passwordResetFinishRoute, passwordResetInitRoute, registerRoute, settingsRoute];\n\nexport const accountState: Routes = [\n  {\n    path: '',\n    children: ACCOUNT_ROUTES,\n  },\n];\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ActivateService } from './activate.service';\n\n@Component({\n  selector: 'jhi-activate',\n  templateUrl: './activate.component.html',\n})\nexport class ActivateComponent implements OnInit {\n  error = false;\n  success = false;\n\n  constructor(private activateService: ActivateService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.pipe(mergeMap(params => this.activateService.get(params.key))).subscribe({\n      next: () => (this.success = true),\n      error: () => (this.error = true),\n    });\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"activate.title\">Activation</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"activate.messages.success\"><strong>Your user account has been activated.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"activate.messages.error\">\n        <strong>Your user could not be activated.</strong> Please use the registration form to sign up.\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { ActivateComponent } from './activate.component';\n\nexport const activateRoute: Route = {\n  path: 'activate',\n  component: ActivateComponent,\n  data: {\n    pageTitle: 'activate.title',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ActivateService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  get(key: string): Observable<{}> {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/activate'), {\n      params: new HttpParams().set('key', key),\n    });\n  }\n}\n","import { Component, OnInit, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { PasswordResetFinishService } from './password-reset-finish.service';\n\n@Component({\n  selector: 'jhi-password-reset-finish',\n  templateUrl: './password-reset-finish.component.html',\n})\nexport class PasswordResetFinishComponent implements OnInit, AfterViewInit {\n  @ViewChild('newPassword', { static: false })\n  newPassword?: ElementRef;\n\n  initialized = false;\n  doNotMatch = false;\n  error = false;\n  success = false;\n  key = '';\n\n  passwordForm = new FormGroup({\n    newPassword: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    }),\n    confirmPassword: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    }),\n  });\n\n  constructor(private passwordResetFinishService: PasswordResetFinishService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params['key']) {\n        this.key = params['key'];\n      }\n      this.initialized = true;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    if (this.newPassword) {\n      this.newPassword.nativeElement.focus();\n    }\n  }\n\n  finishReset(): void {\n    this.doNotMatch = false;\n    this.error = false;\n\n    const { newPassword, confirmPassword } = this.passwordForm.getRawValue();\n\n    if (newPassword !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordResetFinishService.save(this.key, newPassword).subscribe({\n        next: () => (this.success = true),\n        error: () => (this.error = true),\n      });\n    }\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-4\">\n      <h1 jhiTranslate=\"reset.finish.title\">Reset password</h1>\n\n      <div class=\"alert alert-danger\" jhiTranslate=\"reset.finish.messages.keymissing\" *ngIf=\"initialized && !key\">\n        The reset key is missing.\n      </div>\n\n      <div class=\"alert alert-warning\" *ngIf=\"key && !success\">\n        <span jhiTranslate=\"reset.finish.messages.info\">Choose a new password</span>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\">\n        <span jhiTranslate=\"reset.finish.messages.error\"\n          >Your password couldn't be reset. Remember a password request is only valid for 24 hours.</span\n        >\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"reset.finish.messages.success\"><strong>Your password has been reset.</strong> Please </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a>.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <div *ngIf=\"key && !success\">\n        <form name=\"form\" role=\"form\" (ngSubmit)=\"finishReset()\" [formGroup]=\"passwordForm\">\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n              formControlName=\"newPassword\"\n              data-cy=\"resetPassword\"\n              #newPassword\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('newPassword')!.invalid &&\n                (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n                jhiTranslate=\"global.messages.validate.newpassword.required\"\n              >\n                Your password is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n                jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n              >\n                Your password is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n                jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n              >\n                Your password cannot be longer than 50 characters.\n              </small>\n            </div>\n\n            <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n          </div>\n\n          <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\"\n              >New password confirmation</label\n            >\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n              formControlName=\"confirmPassword\"\n              data-cy=\"confirmResetPassword\"\n            />\n\n            <div\n              *ngIf=\"\n                passwordForm.get('confirmPassword')!.invalid &&\n                (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n              \"\n            >\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n              >\n                Your confirmation password is required.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n              >\n                Your confirmation password is required to be at least 4 characters.\n              </small>\n\n              <small\n                class=\"form-text text-danger\"\n                *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n                jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n              >\n                Your confirmation password cannot be longer than 50 characters.\n              </small>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            [disabled]=\"passwordForm.invalid\"\n            class=\"btn btn-primary\"\n            jhiTranslate=\"reset.finish.form.button\"\n            data-cy=\"submit\"\n          >\n            Validate new password\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { PasswordResetFinishComponent } from './password-reset-finish.component';\n\nexport const passwordResetFinishRoute: Route = {\n  path: 'reset/finish',\n  component: PasswordResetFinishComponent,\n  data: {\n    pageTitle: 'global.menu.account.password',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetFinishService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(key: string, newPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/finish'), { key, newPassword });\n  }\n}\n","import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\nimport { PasswordResetInitService } from './password-reset-init.service';\n\n@Component({\n  selector: 'jhi-password-reset-init',\n  templateUrl: './password-reset-init.component.html',\n})\nexport class PasswordResetInitComponent implements AfterViewInit {\n  @ViewChild('email', { static: false })\n  email?: ElementRef;\n\n  success = false;\n  resetRequestForm = this.fb.group({\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n  });\n\n  constructor(private passwordResetInitService: PasswordResetInitService, private fb: FormBuilder) {}\n\n  ngAfterViewInit(): void {\n    if (this.email) {\n      this.email.nativeElement.focus();\n    }\n  }\n\n  requestReset(): void {\n    this.passwordResetInitService.save(this.resetRequestForm.get(['email'])!.value).subscribe(() => (this.success = true));\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"reset.request.title\">Reset your password</h1>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <div class=\"alert alert-warning\" *ngIf=\"!success\">\n        <span jhiTranslate=\"reset.request.messages.info\">Enter the email address you used to register</span>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\">\n        <span jhiTranslate=\"reset.request.messages.success\">Check your emails for details on how to reset your password.</span>\n      </div>\n\n      <form *ngIf=\"!success\" name=\"form\" role=\"form\" (ngSubmit)=\"requestReset()\" [formGroup]=\"resetRequestForm\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"emailResetPassword\"\n            #email\n          />\n\n          <div\n            *ngIf=\"\n              resetRequestForm.get('email')!.invalid && (resetRequestForm.get('email')!.dirty || resetRequestForm.get('email')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"resetRequestForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"resetRequestForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"reset.request.form.button\"\n          data-cy=\"submit\"\n        >\n          Reset password\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { PasswordResetInitComponent } from './password-reset-init.component';\n\nexport const passwordResetInitRoute: Route = {\n  path: 'reset/request',\n  component: PasswordResetInitComponent,\n  data: {\n    pageTitle: 'global.menu.account.password',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordResetInitService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(mail: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/reset-password/init'), mail);\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'jhi-password-strength-bar',\n  templateUrl: './password-strength-bar.component.html',\n  styleUrls: ['./password-strength-bar.component.scss'],\n})\nexport class PasswordStrengthBarComponent {\n  colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef) {}\n\n  measureStrength(p: string): number {\n    let force = 0;\n    const regex = /[$-/:-?{-~!\"^_`[\\]]/g; // \"\n    const lowerLetters = /[a-z]+/.test(p);\n    const upperLetters = /[A-Z]+/.test(p);\n    const numbers = /\\d+/.test(p);\n    const symbols = regex.test(p);\n\n    const flags = [lowerLetters, upperLetters, numbers, symbols];\n    const passedMatches = flags.filter((isMatchedFlag: boolean) => isMatchedFlag === true).length;\n\n    force += 2 * p.length + (p.length >= 10 ? 1 : 0);\n    force += passedMatches * 10;\n\n    // penalty (short password)\n    force = p.length <= 6 ? Math.min(force, 10) : force;\n\n    // penalty (poor variety of characters)\n    force = passedMatches === 1 ? Math.min(force, 10) : force;\n    force = passedMatches === 2 ? Math.min(force, 20) : force;\n    force = passedMatches === 3 ? Math.min(force, 40) : force;\n\n    return force;\n  }\n\n  getColor(s: number): { idx: number; color: string } {\n    let idx = 0;\n    if (s > 10) {\n      if (s <= 20) {\n        idx = 1;\n      } else if (s <= 30) {\n        idx = 2;\n      } else if (s <= 40) {\n        idx = 3;\n      } else {\n        idx = 4;\n      }\n    }\n    return { idx: idx + 1, color: this.colors[idx] };\n  }\n\n  @Input()\n  set passwordToCheck(password: string) {\n    if (password) {\n      const c = this.getColor(this.measureStrength(password));\n      const element = this.elementRef.nativeElement;\n      if (element.className) {\n        this.renderer.removeClass(element, element.className);\n      }\n      const lis = element.getElementsByTagName('li');\n      for (let i = 0; i < lis.length; i++) {\n        if (i < c.idx) {\n          this.renderer.setStyle(lis[i], 'backgroundColor', c.color);\n        } else {\n          this.renderer.setStyle(lis[i], 'backgroundColor', '#DDD');\n        }\n      }\n    }\n  }\n}\n","<div id=\"strength\">\n  <small jhiTranslate=\"global.messages.validate.newpassword.strength\">Password strength:</small>\n  <ul id=\"strengthBar\">\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n    <li class=\"point\"></li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { PasswordService } from './password.service';\n\n@Component({\n  selector: 'jhi-password',\n  templateUrl: './password.component.html',\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = new FormGroup({\n    currentPassword: new FormControl('', { nonNullable: true, validators: Validators.required }),\n    newPassword: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    }),\n    confirmPassword: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    }),\n  });\n\n  constructor(private passwordService: PasswordService, private accountService: AccountService) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const { newPassword, confirmPassword, currentPassword } = this.passwordForm.getRawValue();\n    if (newPassword !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService.save(newPassword, currentPassword).subscribe({\n        next: () => (this.success = true),\n        error: () => (this.error = true),\n      });\n    }\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\" *ngIf=\"account$ | async as account\">\n      <h2 jhiTranslate=\"password.title\" [translateValues]=\"{ username: account.login }\">\n        Password for [<strong>{{ account.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"password.messages.success\">\n        <strong>Password changed!</strong>\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"password.messages.error\">\n        <strong>An error has occurred!</strong> The password could not be changed.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"changePassword()\" [formGroup]=\"passwordForm\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"currentPassword\" jhiTranslate=\"global.form.currentpassword.label\">Current password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            placeholder=\"{{ 'global.form.currentpassword.placeholder' | translate }}\"\n            formControlName=\"currentPassword\"\n            data-cy=\"currentPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('currentPassword')!.invalid &&\n              (passwordForm.get('currentPassword')!.dirty || passwordForm.get('currentPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('currentPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"newPassword\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"newPassword\"\n            name=\"newPassword\"\n            placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n            formControlName=\"newPassword\"\n            data-cy=\"newPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('newPassword')!.invalid &&\n              (passwordForm.get('newPassword')!.dirty || passwordForm.get('newPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('newPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"passwordForm.get('newPassword')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\">New password confirmation</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"confirmPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              passwordForm.get('confirmPassword')!.invalid &&\n              (passwordForm.get('confirmPassword')!.dirty || passwordForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n            >\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"passwordForm.get('confirmPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"passwordForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"password.form.button\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { PasswordComponent } from './password.component';\n\nexport const passwordRoute: Route = {\n  path: 'password',\n  component: PasswordComponent,\n  data: {\n    pageTitle: 'global.menu.account.password',\n  },\n  canActivate: [UserRouteAccessService],\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PasswordService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(newPassword: string, currentPassword: string): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/account/change-password'), { currentPassword, newPassword });\n  }\n}\n","import { Component, AfterViewInit, ElementRef, ViewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/config/error.constants';\nimport { RegisterService } from './register.service';\n\n@Component({\n  selector: 'jhi-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements AfterViewInit {\n  @ViewChild('login', { static: false })\n  login?: ElementRef;\n\n  doNotMatch = false;\n  error = false;\n  errorEmailExists = false;\n  errorUserExists = false;\n  success = false;\n\n  registerForm = new FormGroup({\n    login: new FormControl('', {\n      nonNullable: true,\n      validators: [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n        Validators.pattern('^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$'),\n      ],\n    }),\n    email: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email],\n    }),\n    password: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    }),\n    confirmPassword: new FormControl('', {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(4), Validators.maxLength(50)],\n    }),\n  });\n\n  constructor(private translateService: TranslateService, private registerService: RegisterService) {}\n\n  ngAfterViewInit(): void {\n    if (this.login) {\n      this.login.nativeElement.focus();\n    }\n  }\n\n  register(): void {\n    this.doNotMatch = false;\n    this.error = false;\n    this.errorEmailExists = false;\n    this.errorUserExists = false;\n\n    const { password, confirmPassword } = this.registerForm.getRawValue();\n    if (password !== confirmPassword) {\n      this.doNotMatch = true;\n    } else {\n      const { login, email } = this.registerForm.getRawValue();\n      this.registerService\n        .save({ login, email, password, langKey: this.translateService.currentLang })\n        .subscribe({ next: () => (this.success = true), error: response => this.processError(response) });\n    }\n  }\n\n  private processError(response: HttpErrorResponse): void {\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = true;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = true;\n    } else {\n      this.error = true;\n    }\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h1 jhiTranslate=\"register.title\" data-cy=\"registerTitle\">Registration</h1>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"register.messages.success\">\n        <strong>Registration saved!</strong> Please check your email for confirmation.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"error\" jhiTranslate=\"register.messages.error.fail\">\n        <strong>Registration failed!</strong> Please try again later.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorUserExists\" jhiTranslate=\"register.messages.error.userexists\">\n        <strong>Login name already registered!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"errorEmailExists\" jhiTranslate=\"register.messages.error.emailexists\">\n        <strong>Email is already in use!</strong> Please choose another one.\n      </div>\n\n      <div class=\"alert alert-danger\" *ngIf=\"doNotMatch\" jhiTranslate=\"global.messages.error.dontmatch\">\n        The password and its confirmation do not match!\n      </div>\n    </div>\n  </div>\n\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"register()\" [formGroup]=\"registerForm\" *ngIf=\"!success\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"login\" jhiTranslate=\"global.form.username.label\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"login\"\n            name=\"login\"\n            placeholder=\"{{ 'global.form.username.placeholder' | translate }}\"\n            formControlName=\"login\"\n            data-cy=\"username\"\n            #login\n          />\n\n          <div *ngIf=\"registerForm.get('login')!.invalid && (registerForm.get('login')!.dirty || registerForm.get('login')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.required\"\n              jhiTranslate=\"register.messages.validate.login.required\"\n            >\n              Your username is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.minlength\"\n              jhiTranslate=\"register.messages.validate.login.minlength\"\n            >\n              Your username is required to be at least 1 character.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.maxlength\"\n              jhiTranslate=\"register.messages.validate.login.maxlength\"\n            >\n              Your username cannot be longer than 50 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('login')?.errors?.pattern\"\n              jhiTranslate=\"register.messages.validate.login.pattern\"\n            >\n              Your username is invalid.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"registerForm.get('email')!.invalid && (registerForm.get('email')!.dirty || registerForm.get('email')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.invalid\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"password\" jhiTranslate=\"global.form.newpassword.label\">New password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            placeholder=\"{{ 'global.form.newpassword.placeholder' | translate }}\"\n            formControlName=\"password\"\n            data-cy=\"firstPassword\"\n          />\n\n          <div\n            *ngIf=\"registerForm.get('password')!.invalid && (registerForm.get('password')!.dirty || registerForm.get('password')!.touched)\"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.newpassword.required\"\n            >\n              Your password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.minlength\"\n            >\n              Your password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('password')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.newpassword.maxlength\"\n            >\n              Your password cannot be longer than 50 characters.\n            </small>\n          </div>\n\n          <jhi-password-strength-bar [passwordToCheck]=\"registerForm.get('password')!.value\"></jhi-password-strength-bar>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"confirmPassword\" jhiTranslate=\"global.form.confirmpassword.label\">New password confirmation</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            placeholder=\"{{ 'global.form.confirmpassword.placeholder' | translate }}\"\n            formControlName=\"confirmPassword\"\n            data-cy=\"secondPassword\"\n          />\n\n          <div\n            *ngIf=\"\n              registerForm.get('confirmPassword')!.invalid &&\n              (registerForm.get('confirmPassword')!.dirty || registerForm.get('confirmPassword')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.required\"\n            >\n              Your confirmation password is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.minlength\"\n            >\n              Your confirmation password is required to be at least 4 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"registerForm.get('confirmPassword')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.confirmpassword.maxlength\"\n            >\n              Your confirmation password cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"registerForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"register.form.button\"\n          data-cy=\"submit\"\n        >\n          Register\n        </button>\n      </form>\n\n      <div class=\"mt-3 alert alert-warning\">\n        <span jhiTranslate=\"global.messages.info.authenticated.prefix\">If you want to </span>\n        <a class=\"alert-link\" routerLink=\"/login\" jhiTranslate=\"global.messages.info.authenticated.link\">sign in</a\n        ><span jhiTranslate=\"global.messages.info.authenticated.suffix\"\n          >, you can try the default accounts:<br />- Administrator (login=\"admin\" and password=\"admin\") <br />- User (login=\"user\" and\n          password=\"user\").</span\n        >\n      </div>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { RegisterComponent } from './register.component';\n\nexport const registerRoute: Route = {\n  path: 'register',\n  component: RegisterComponent,\n  data: {\n    pageTitle: 'register.title',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Registration } from './register.model';\n\n@Injectable({ providedIn: 'root' })\nexport class RegisterService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  save(registration: Registration): Observable<{}> {\n    return this.http.post(this.applicationConfigService.getEndpointFor('api/register'), registration);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { LANGUAGES } from 'app/config/language.constants';\n\nconst initialAccount: Account = {} as Account;\n\n@Component({\n  selector: 'jhi-settings',\n  templateUrl: './settings.component.html',\n})\nexport class SettingsComponent implements OnInit {\n  success = false;\n  languages = LANGUAGES;\n\n  settingsForm = new FormGroup({\n    firstName: new FormControl(initialAccount.firstName, {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(1), Validators.maxLength(50)],\n    }),\n    lastName: new FormControl(initialAccount.lastName, {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(1), Validators.maxLength(50)],\n    }),\n    email: new FormControl(initialAccount.email, {\n      nonNullable: true,\n      validators: [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email],\n    }),\n    langKey: new FormControl(initialAccount.langKey, { nonNullable: true }),\n\n    activated: new FormControl(initialAccount.activated, { nonNullable: true }),\n    authorities: new FormControl(initialAccount.authorities, { nonNullable: true }),\n    imageUrl: new FormControl(initialAccount.imageUrl, { nonNullable: true }),\n    login: new FormControl(initialAccount.login, { nonNullable: true }),\n  });\n\n  constructor(private accountService: AccountService, private translateService: TranslateService) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => {\n      if (account) {\n        this.settingsForm.patchValue(account);\n      }\n    });\n  }\n\n  save(): void {\n    this.success = false;\n\n    const account = this.settingsForm.getRawValue();\n    this.accountService.save(account).subscribe(() => {\n      this.success = true;\n\n      this.accountService.authenticate(account);\n\n      if (account.langKey !== this.translateService.currentLang) {\n        this.translateService.use(account.langKey);\n      }\n    });\n  }\n}\n","<div>\n  <div class=\"d-flex justify-content-center\">\n    <div class=\"col-md-8\">\n      <h2 jhiTranslate=\"settings.title\" [translateValues]=\"{ username: settingsForm.value.login }\" *ngIf=\"settingsForm.value.login\">\n        User settings for [<strong>{{ settingsForm.value.login }}</strong\n        >]\n      </h2>\n\n      <div class=\"alert alert-success\" *ngIf=\"success\" jhiTranslate=\"settings.messages.success\">\n        <strong>Settings saved!</strong>\n      </div>\n\n      <jhi-alert-error></jhi-alert-error>\n\n      <form name=\"form\" role=\"form\" (ngSubmit)=\"save()\" [formGroup]=\"settingsForm\" *ngIf=\"settingsForm.value.login\" novalidate>\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"firstName\" jhiTranslate=\"settings.form.firstname\">First Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"firstName\"\n            name=\"firstName\"\n            placeholder=\"{{ 'settings.form.firstname.placeholder' | translate }}\"\n            formControlName=\"firstName\"\n            data-cy=\"firstname\"\n          />\n\n          <div\n            *ngIf=\"\n              settingsForm.get('firstName')!.invalid && (settingsForm.get('firstName')!.dirty || settingsForm.get('firstName')!.touched)\n            \"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.required\"\n              jhiTranslate=\"settings.messages.validate.firstname.required\"\n            >\n              Your first name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.minlength\"\n              jhiTranslate=\"settings.messages.validate.firstname.minlength\"\n            >\n              Your first name is required to be at least 1 character\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('firstName')?.errors?.maxlength\"\n              jhiTranslate=\"settings.messages.validate.firstname.maxlength\"\n            >\n              Your first name cannot be longer than 50 characters\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"lastName\" jhiTranslate=\"settings.form.lastname\">Last Name</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"lastName\"\n            name=\"lastName\"\n            placeholder=\"{{ 'settings.form.lastname.placeholder' | translate }}\"\n            formControlName=\"lastName\"\n            data-cy=\"lastname\"\n          />\n\n          <div\n            *ngIf=\"settingsForm.get('lastName')!.invalid && (settingsForm.get('lastName')!.dirty || settingsForm.get('lastName')!.touched)\"\n          >\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.required\"\n              jhiTranslate=\"settings.messages.validate.lastname.required\"\n            >\n              Your last name is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.minlength\"\n              jhiTranslate=\"settings.messages.validate.lastname.minlength\"\n            >\n              Your last name is required to be at least 1 character\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('lastName')?.errors?.maxlength\"\n              jhiTranslate=\"settings.messages.validate.lastname.maxlength\"\n            >\n              Your last name cannot be longer than 50 characters\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\">\n          <label class=\"form-label\" for=\"email\" jhiTranslate=\"global.form.email.label\">Email</label>\n          <input\n            type=\"email\"\n            class=\"form-control\"\n            id=\"email\"\n            name=\"email\"\n            placeholder=\"{{ 'global.form.email.placeholder' | translate }}\"\n            formControlName=\"email\"\n            data-cy=\"email\"\n          />\n\n          <div *ngIf=\"settingsForm.get('email')!.invalid && (settingsForm.get('email')!.dirty || settingsForm.get('email')!.touched)\">\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.required\"\n              jhiTranslate=\"global.messages.validate.email.required\"\n            >\n              Your email is required.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.email\"\n              jhiTranslate=\"global.messages.validate.email.invalid\"\n            >\n              Your email is invalid.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.minlength\"\n              jhiTranslate=\"global.messages.validate.email.minlength\"\n            >\n              Your email is required to be at least 5 characters.\n            </small>\n\n            <small\n              class=\"form-text text-danger\"\n              *ngIf=\"settingsForm.get('email')?.errors?.maxlength\"\n              jhiTranslate=\"global.messages.validate.email.maxlength\"\n            >\n              Your email cannot be longer than 50 characters.\n            </small>\n          </div>\n        </div>\n\n        <div class=\"mb-3\" *ngIf=\"languages && languages.length > 0\">\n          <label for=\"langKey\" jhiTranslate=\"settings.form.language\">Language</label>\n          <select class=\"form-control\" id=\"langKey\" name=\"langKey\" formControlName=\"langKey\" data-cy=\"langKey\">\n            <option *ngFor=\"let language of languages\" [value]=\"language\">{{ language | findLanguageFromKey }}</option>\n          </select>\n        </div>\n\n        <button\n          type=\"submit\"\n          [disabled]=\"settingsForm.invalid\"\n          class=\"btn btn-primary\"\n          jhiTranslate=\"settings.form.button\"\n          data-cy=\"submit\"\n        >\n          Save\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Route } from '@angular/router';\n\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { SettingsComponent } from './settings.component';\n\nexport const settingsRoute: Route = {\n  path: 'settings',\n  component: SettingsComponent,\n  data: {\n    pageTitle: 'global.menu.account.settings',\n  },\n  canActivate: [UserRouteAccessService],\n};\n","export const PROBLEM_BASE_URL = 'https://www.jhipster.tech/problem';\nexport const EMAIL_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/email-already-used`;\nexport const LOGIN_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/login-already-used`;\n"],"names":["FormGroup","FormControl","Validators","i0","PasswordComponent","constructor","passwordService","accountService","currentPassword","nonNullable","validators","required","newPassword","minLength","maxLength","confirmPassword","ngOnInit","account$","identity","changePassword","error","success","doNotMatch","passwordForm","getRawValue","save","subscribe","next","selectors","decls","vars","consts","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}